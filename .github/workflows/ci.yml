# This GitHub Actions workflow defines the Continuous Integration and Continuous Deployment (CI/CD) pipeline.
# It automates the process of testing, building, and deploying the application to Google Cloud.

name: CI/CD Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
  # Triggers the workflow on pull request events for the "main" branch
  pull_request:
    branches: [ "main" ]

jobs:
  # This job handles linting and testing of the Python codebase.
  lint-and-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      # Sets up a Python 3.10 environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Installs Poetry, a dependency management tool for Python
      - name: Install Poetry
        uses: snok/install-poetry@v1

      # Installs project dependencies using Poetry
      - name: Install dependencies
        run: poetry install

      # Runs flake8 to lint the code for style and quality issues
      - name: Lint with flake8
        run: poetry run flake8 .

      # Runs mypy for static type checking to catch type errors
      - name: Check types with mypy
        run: poetry run mypy .

      # Runs pytest to execute the automated test suite
      - name: Test with pytest
        run: poetry run pytest

  # This job builds the Docker image and deploys it to Google Cloud Run.
  build-and-deploy:
    # This job needs the 'lint-and-test' job to complete successfully before it runs.
    needs: lint-and-test
    # This job only runs on a push to the main branch, not on pull requests.
    if: github.ref == 'refs/heads/main'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      # Authenticates to Google Cloud using Workload Identity Federation.
      # This is the recommended way to authenticate from GitHub Actions to GCP.
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: 'PASTE_YOUR_SERVICE_ACCOUNT_KEY_JSON_HERE'

      # Submits the build to Google Cloud Build.
      # Cloud Build will use the Dockerfile in the repository to build the container image.
      # The image will be tagged with the Git commit SHA and pushed to Google Container Registry (GCR).
      - name: Build with Cloud Build
        run: |-
          gcloud builds submit --tag "gcr.io/deft-striker-465815-t9/api-orchestrator-v2:$GITHUB_SHA" .

      # Deploys the newly built container image to the specified Cloud Run service.
      # It uses the image just built and pushed to GCR.
      # --platform managed specifies a fully managed Cloud Run environment.
      # --region specifies the GCP region where the service is located.
      # --quiet suppresses interactive prompts.
      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy api-orchestrator-v2 \
            --image "gcr.io/deft-striker-465815-t9/api-orchestrator-v2:$GITHUB_SHA" \
            --platform managed \
            --region "us-central1" \
            --quiet
