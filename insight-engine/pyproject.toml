[tool.poetry]
name = "insight-engine"
version = "0.1.0"
description = "AI-powered video analysis platform"
authors = ["Your Name <you@example.com>"]

packages = [{include = "insight_engine", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "0.115.13"
uvicorn = "0.34.3"
google-cloud-storage = "^2.14.0"
google-cloud-speech = "^2.22.0"
google-cloud-videointelligence = "^2.12.0"
pydantic = "^2.5.3"
arq = "^0.25.0"
qdrant-client = "^1.7.3"
langchain = "0.3.26"
langchain-google-genai = "^2.1.7"
langchain-community = "0.3.27"
langchain-core = "0.3.68"
packaging = "24.2"
httpx = "0.28.1"
scikit-learn = "1.5.1"
psutil = "6.0.0"
google-cloud-pubsub = "^2.13.0"
opentelemetry-sdk = "1.24.0"
opentelemetry-semantic-conventions = "0.45b0"
pyyaml = "6.0.2"
mlflow = "^2.10.0"
google-cloud-dlp = "^3.12.0"
ffmpeg-python = "^0.2.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
redis = "^5.0.1"
google-cloud-secret-manager = "^2.16.0"
google-cloud-core = "^2.3.2"
bleach = "^6.0.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
httpx = "^0.28.1"

# Code Quality
black = "^24.0.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"
ruff = "^0.1.0"

# Pre-commit
pre-commit = "^3.6.0"

# Type stubs
types-PyYAML = "^6.0.0"
types-redis = "^4.6.0"
types-requests = "^2.31.0"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["insight_engine"]
known_third_party = ["fastapi", "pydantic", "langchain", "qdrant_client"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "arq.*",
    "google.cloud.*",
    "langchain.*",
    "qdrant_client.*",
    "mlflow.*",
    "ffmpeg.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/insight_engine",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/insight_engine"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"